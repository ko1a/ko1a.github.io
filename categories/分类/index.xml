<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分类 on 阿强的blog</title>
    <link>https://ko1a.github.io/categories/%E5%88%86%E7%B1%BB/</link>
    <description>Recent content in 分类 on 阿强的blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 May 2021 18:02:17 +0800</lastBuildDate><atom:link href="https://ko1a.github.io/categories/%E5%88%86%E7%B1%BB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>java中的位运算</title>
      <link>https://ko1a.github.io/post/bitoperationblog/</link>
      <pubDate>Thu, 20 May 2021 18:02:17 +0800</pubDate>
      
      <guid>https://ko1a.github.io/post/bitoperationblog/</guid>
      <description>写在前面的话 关于位运算,有一种既熟悉又陌生的感觉.熟悉是因为我们当初学java基础的时候,应该也都学过.并且平常在阅读一些源码的时候经常看见它的身影,比如说HashMap的源码 ↓↓↓
static final int tableSizeFor(int cap) { int n = cap - 1; n |= n &amp;gt;&amp;gt;&amp;gt; 1; n |= n &amp;gt;&amp;gt;&amp;gt; 2; n |= n &amp;gt;&amp;gt;&amp;gt; 4; n |= n &amp;gt;&amp;gt;&amp;gt; 8; n |= n &amp;gt;&amp;gt;&amp;gt; 16; return (n &amp;lt; 0) ? 1 : (n &amp;gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1; } 陌生是因为日常开发中,大概率是不会去使用它. 结论:你可以不去使用它,但你必须得懂它
关于二进制 一切的起源都要从二进制开始&amp;hellip;在了解位之前,有必要先知道二进制的概念
百度百科:二进制
Java 中的二进制 //举个例子: //int占4个字节（byte） //1byte = 8bit //换算下来，一个int类型即占32bit int i = 5; //这里的5为十进制，转换为二进制为：101，使用完整的32位表示即为：00000000 00000000 00000000 00000101 Java 提供了进制转换的API</description>
    </item>
    
  </channel>
</rss>
