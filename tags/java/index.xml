<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 阿强的blog</title>
    <link>https://ko1a.github.io/tags/java/</link>
    <description>Recent content in Java on 阿强的blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Dec 2020 13:21:20 +0800</lastBuildDate><atom:link href="https://ko1a.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>服务注册中心：eureka、zookeeper、consul</title>
      <link>https://ko1a.github.io/post/210312/</link>
      <pubDate>Wed, 30 Dec 2020 13:21:20 +0800</pubDate>
      
      <guid>https://ko1a.github.io/post/210312/</guid>
      <description>前言 在传统的RPC远程调用框架中，管理服务与服务之间依赖关系比较复杂，所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。
Eureka 简介 Spring Cloud Eureka是Spring Cloud Netflix 子项目的核心组件之一，主要用于微服务架构中的服务治理
Eureka Server提供服务注册服务
各个微服务节点通过配置启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。
EurekaClient通过注册中心进行访问
它是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除（默认90秒)
部署Eureka server POM 文件 导入依赖
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-eureka-server&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 启动类 @EnableEurekaServer
@SpringBootApplication @EnableEurekaServer public class EurekaApplication { public static void main(String[] args) { SpringApplication.run(EurekaApplication.class, args); } } application.yml 配置
server: port: 7001 eureka: instance: hostname: eureka7001 #eureka 实例名称 client: register-with-eureka: false fetch-registry: false service-url: defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/ 玩了之后启动服务，在浏览器输入本机IP+端口号即可访问
部署Eureka Client 上面我们已经完成了，eureka服务端的部署，现在我们来部署一个客户端。并将它注册到服务端
POM文件引入依赖
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>spring boot 核心的注解</title>
      <link>https://ko1a.github.io/post/sb_annotations/</link>
      <pubDate>Sat, 19 Dec 2020 13:21:20 +0800</pubDate>
      
      <guid>https://ko1a.github.io/post/sb_annotations/</guid>
      <description>前言 在我们利用spring boot日常开发中,包括spring boot源码里.经常会出现一些很常见的注解.所以就想着花点时间总结一下&amp;hellip;
@Configuration 它一般用来声明一个配置类,用来代替 xml 配置文件
@Configuration(proxyBeanMethods = false) public class MyConfig { // 将MyBean 注册到spring 容器中, 方法名就是 beanNname  @Bean public MyBean myBean() { return new MyBean(); } } 同等于
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34; http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd&amp;#34;&amp;gt; &amp;lt;bean id=&amp;#34;MyBean&amp;#34; class=&amp;#34;com.bean.MyBean&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;name&amp;#34; value=&amp;#34;阿强&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;/beans&amp;gt; 看一下@Configuration的内部实现
@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented @Component public @interface Configuration { ... } 可以看到,它里面也用到了@Component 注解,意味着他也是个组件,将注册到spring 容器中
@Configuration 注解在spring boot 2.0 之后新加了一个属性:proxyBeanMethods是用来指定@Bean注解标注的方法是否使用代理，默认是true使用代理，直接从IOC容器之中取得对象；如果设置为 false,也就是不使用注解，每次调用@Bean标注的方法获取到的对象和IOC容器中的都不一样，是一个新的对象，所以我们可以将此属性设置为false来提高性能</description>
    </item>
    
    <item>
      <title>手撕HashMap(Jdk8)</title>
      <link>https://ko1a.github.io/post/blog2hashmap/</link>
      <pubDate>Fri, 19 Jun 2020 13:20:17 +0800</pubDate>
      
      <guid>https://ko1a.github.io/post/blog2hashmap/</guid>
      <description>概述 今天我们来聊聊,我们日常开发中最常用的一个集合类:HashMap,在我们面试中也会被经常问到相关问题,由于HashMap数据结构较为复杂，回答相关问题的时候往往不尽人意，尤其是在JDK1.8之后，又引入了红黑树结构，其数据结构变的更加复杂，那么本文会分成三个部分来透彻的对HashMap进行分析.
 一、基础知识   数组
数组是在内存中存储相同数据类型的连续的空间,每一个数据称作一个元素，每个元素可以通过一个索引(下标)来访问它们.
优点:
 可以保存若干个数据 随机访问的效率很高。根据下标访问元素效率高（元素连续分配空间）。  缺点:
 数组的元素的类型必须一致 数组定长，不能自动扩容 删除元素、插入元素效率比较低，需要移动大量的元素    链表
链表在内存中不是连续的空间,每一块空间有一块引用保存下一块内存的地址
图是单链表
优点:
 任意加减元素 添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可 添加，删除效率高  缺点:
 因为含有大量的指针域，占用空间较大 查找元素需要遍历链表来查找    散列表
散列表结构基于 数组+链表 ,整合了数组的快速索引和链表的动态扩容的优势
  什么是哈希(hash)
hash 也成散列,哈希,基本原理就是把任意长度的输入,通过hash算法变成固定长度的输出.这个映射规则就是对应的hash算法,原始数据映射后的二进制串就是哈希值(hashCode)
特点:
  从hash值不能反向推导出原始数据
  输入的数据微小变化会得到完全不同的hash值,相同的数据会得到相同的hash值
  hash算法的执行效率高,长文本也能快速计算hash值
  hash算法的冲突概率要小
   hash碰撞:由于hash原理是将输入空间的值映射成hash空间内,并且hash值得空间远小于输入的空间
比如:桌上十个苹果,放到九个抽屉里面,无论如何都会重复.这一现象称为:抽屉原理
  二、基本原理 存储结构 结构实现来讲，HashMap是数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的，如下如所示。
HashMap 使用拉链式的散列算法,其数据结构是由数组和链表（或树形结构）组成。</description>
    </item>
    
    <item>
      <title>java中的位运算</title>
      <link>https://ko1a.github.io/post/bitoperationblog/</link>
      <pubDate>Wed, 20 May 2020 18:02:17 +0800</pubDate>
      
      <guid>https://ko1a.github.io/post/bitoperationblog/</guid>
      <description>写在前面的话 关于位运算,有一种既熟悉又陌生的感觉.熟悉是因为我们当初学java基础的时候,应该也都学过.并且平常在阅读一些源码的时候经常看见它的身影,比如说HashMap的源码 ↓↓↓
static final int tableSizeFor(int cap) { int n = cap - 1; n |= n &amp;gt;&amp;gt;&amp;gt; 1; n |= n &amp;gt;&amp;gt;&amp;gt; 2; n |= n &amp;gt;&amp;gt;&amp;gt; 4; n |= n &amp;gt;&amp;gt;&amp;gt; 8; n |= n &amp;gt;&amp;gt;&amp;gt; 16; return (n &amp;lt; 0) ? 1 : (n &amp;gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1; } 陌生是因为日常开发中,大概率是不会去使用它. 结论:你可以不去使用它,但你必须得懂它
关于二进制 一切的起源都要从二进制开始&amp;hellip;在了解位之前,有必要先知道二进制的概念
百度百科:二进制
Java 中的二进制 //举个例子: //int占4个字节（byte） //1byte = 8bit //换算下来，一个int类型即占32bit int i = 5; //这里的5为十进制，转换为二进制为：101，使用完整的32位表示即为：00000000 00000000 00000000 00000101 Java 提供了进制转换的API</description>
    </item>
    
  </channel>
</rss>
