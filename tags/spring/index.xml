<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring on 阿强的blog</title>
    <link>https://ko1a.github.io/tags/spring/</link>
    <description>Recent content in spring on 阿强的blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Jan 2022 13:20:17 +0800</lastBuildDate><atom:link href="https://ko1a.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sentinel使用(一)</title>
      <link>https://ko1a.github.io/post/sentinel1/</link>
      <pubDate>Wed, 19 Jan 2022 13:20:17 +0800</pubDate>
      
      <guid>https://ko1a.github.io/post/sentinel1/</guid>
      <description>概述 Sentinel是什么 随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。
官方文档
Sentinel 具有以下特征:
 丰富的应用场景：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。 完备的实时监控：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。 广泛的开源生态：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。 完善的 SPI 扩展点：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。  下载安装Sentinel 下载地址：Sentinel/releases
我这里选择的是:sentinel-dashboard-1.8.2.jar
通过命令启动：
java -jar sentinel-dashboard-1.8.2.jar
sentinel-dashboard不像Nacos的服务端那样提供了外置的配置文件，比较容易修改参数。不过不要紧，由于sentinel-dashboard是一个标准的spring boot应用，所以如果要自定义端口号等内容的话，可以通过在启动命令中增加参数来调整，比如：-Dserver.port=8888。
默认情况下，sentinel-dashboard以8080端口启动，所以可以通过访问：localhost:8080来验证是否已经启动成功，如果一切顺利的话，可以看到如下页面
注意：只有1.6.0及以上版本，才有这个简单的登录页面。默认用户名和密码都是sentinel。对于用户登录的相关配置可以在启动命令中增加下面的参数来进行配置：
 -Dsentinel.dashboard.auth.username=sentinel: 用于指定控制台的登录用户名为 sentinel； -Dsentinel.dashboard.auth.password=123456: 用于指定控制台的登录密码为 123456；如果省略这两个参数，默认用户和密码均为 sentinel -Dserver.servlet.session.timeout=7200: 用于指定 Spring Boot 服务端 session 的过期时间，如 7200 表示 7200 秒；60m 表示 60 分钟，默认为 30 分钟；  输入账户密码登录后，可以看到如下页面：
整合Sentinel 第一步：在Spring Cloud应用的pom.xml中引入Spring Cloud Alibaba的Sentinel模块：</description>
    </item>
    
    <item>
      <title>spring启动流程,源码解析</title>
      <link>https://ko1a.github.io/post/springbootstartprocess/</link>
      <pubDate>Mon, 20 Dec 2021 17:24:57 +0800</pubDate>
      
      <guid>https://ko1a.github.io/post/springbootstartprocess/</guid>
      <description>概述 在Java后端开发领域，大名鼎鼎的Spring Boot框架想必大家都用过。
用过Spring Boot的应该都知道，在项目启动入口的主类main()方法里，一句简简单单的
SpringApplication.run(Application.class, args); 便开启了项目的启动运行之路。
@SpringBootApplication public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } } 本文我们就来看看这个 SpringApplication 以及 run() 方法 到底是个什么鬼，它背后又隐藏了哪些奥秘呢？
1.SpringApplication实例的初始化 还是先对照代码来看：
四个关键的步骤已标注在图中，分别解释如下：
 ① 推断应用的类型：创建的是REACTIVE应用、SERVLET应用、NONE 三种中的某一种   ② 使用SpringFactoriesLoader查找并加载classpath下META-INF/spring.factories文件中所有可用的 ApplicationContextInitializer   ③ 使用SpringFactoriesLoader查找并加载classpath下META-INF/spring.factories文件中的所有可用的 ApplicationListener   ④ 推断并设置main方法的定义类  2.SpringApplication的run()方法 看代码长啥样子：
public ConfigurableApplicationContext run(String... args) { StopWatch stopWatch = new StopWatch(); stopWatch.start(); ConfigurableApplicationContext context = null; Collection&amp;lt;SpringBootExceptionReporter&amp;gt; exceptionReporters = new ArrayList(); this.</description>
    </item>
    
    <item>
      <title>spring boot 核心的注解</title>
      <link>https://ko1a.github.io/post/sb_annotations/</link>
      <pubDate>Sat, 19 Dec 2020 13:21:20 +0800</pubDate>
      
      <guid>https://ko1a.github.io/post/sb_annotations/</guid>
      <description>前言 在我们利用spring boot日常开发中,包括spring boot源码里.经常会出现一些很常见的注解.所以就想着花点时间总结一下&amp;hellip;
@Configuration 它一般用来声明一个配置类,用来代替 xml 配置文件
@Configuration(proxyBeanMethods = false) public class MyConfig { // 将MyBean 注册到spring 容器中, 方法名就是 beanNname  @Bean public MyBean myBean() { return new MyBean(); } } 同等于
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34; http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd&amp;#34;&amp;gt; &amp;lt;bean id=&amp;#34;MyBean&amp;#34; class=&amp;#34;com.bean.MyBean&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;name&amp;#34; value=&amp;#34;阿强&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;/beans&amp;gt; 看一下@Configuration的内部实现
@Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented @Component public @interface Configuration { ... } 可以看到,它里面也用到了@Component 注解,意味着他也是个组件,将注册到spring 容器中
@Configuration 注解在spring boot 2.0 之后新加了一个属性:proxyBeanMethods是用来指定@Bean注解标注的方法是否使用代理，默认是true使用代理，直接从IOC容器之中取得对象；如果设置为 false,也就是不使用注解，每次调用@Bean标注的方法获取到的对象和IOC容器中的都不一样，是一个新的对象，所以我们可以将此属性设置为false来提高性能</description>
    </item>
    
  </channel>
</rss>
